/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.clothocad.tool.sequencechecker;

import java.io.File;
import java.util.ArrayList;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
//import org.clothocore.api.core.Collator;
//import org.clothocore.api.core.wrapper.ConnectionWrapper;
//import org.clothocore.api.data.Format;
//import org.clothocore.api.data.Plasmid;

import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.clothocad.tool.sequencechecker//SeqChecker//EN", autostore = false)
public final class SeqCheckerTopComponent extends TopComponent
{

    /** path to the icon used by the component and its open action */
    protected static final String ICON_PATH = "org/clothocad/tool/sequencechecker/SeqChecker.png";
    protected static final String PREFERRED_ID = "SeqCheckerTopComponent";
    protected static SeqCheckerTopComponent instance;
    
    protected SeqCheckController    _controller;
    protected ArrayList<Construct>  _constructs;

    public SeqCheckerTopComponent()
    {
        initComponents();
        setName(NbBundle.getMessage(SeqCheckerTopComponent.class, "CTL_SeqCheckerTopComponent"));
        setToolTipText(NbBundle.getMessage(SeqCheckerTopComponent.class, "HINT_SeqCheckerTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

        _constructs = new ArrayList<Construct>();
        _controller = new SeqCheckController();
    }

    protected String[][] generateConstructsArray()
    {
        Construct construct;
        int rows = _constructs.size();
        String[][] constructsArray = new String[rows][2];

        for(int i = 0; i < rows; ++i)
        {
            construct = _constructs.get(i);
            constructsArray[i][0] = construct.getIdentifier();
            constructsArray[i][1] = construct.getStatus();
        }
        
        return constructsArray;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        _mainPanel = new javax.swing.JPanel();
        _mainToolBar = new javax.swing.JToolBar();
        _selectButton = new javax.swing.JButton();
        _checkAllButton = new javax.swing.JButton();
        _mainSplitPane = new javax.swing.JSplitPane();
        _splitPane2 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        _constructsTable = new javax.swing.JTable();
        _splitPane3 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        _clonesTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        _primersTable = new javax.swing.JTable();

        _mainPanel.setRequestFocusEnabled(false);
        _mainPanel.setSize(new java.awt.Dimension(800, 600));

        _mainToolBar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        _mainToolBar.setFloatable(false);
        _mainToolBar.setRollover(true);

        org.openide.awt.Mnemonics.setLocalizedText(_selectButton, org.openide.util.NbBundle.getMessage(SeqCheckerTopComponent.class, "SeqCheckerTopComponent._selectButton.text")); // NOI18N
        _selectButton.setToolTipText(org.openide.util.NbBundle.getMessage(SeqCheckerTopComponent.class, "SeqCheckerTopComponent._selectButton.toolTipText_1")); // NOI18N
        _selectButton.setFocusable(false);
        _selectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        _selectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        _selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _selectButtonActionPerformed(evt);
            }
        });
        _mainToolBar.add(_selectButton);

        org.openide.awt.Mnemonics.setLocalizedText(_checkAllButton, org.openide.util.NbBundle.getMessage(SeqCheckerTopComponent.class, "SeqCheckerTopComponent.checkButton.text")); // NOI18N
        _checkAllButton.setToolTipText(org.openide.util.NbBundle.getMessage(SeqCheckerTopComponent.class, "SeqCheckerTopComponent.checkButton.toolTipText")); // NOI18N
        _checkAllButton.setFocusable(false);
        _checkAllButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        _checkAllButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        _checkAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkButtonActionPerformed(evt);
            }
        });
        _mainToolBar.add(_checkAllButton);

        _mainSplitPane.setDividerLocation(300);
        _mainSplitPane.setDividerSize(5);
        _mainSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        _splitPane2.setDividerLocation(175);
        _splitPane2.setDividerSize(5);

        _constructsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Construct", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        _constructsTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        _constructsTable.setFillsViewportHeight(true);
        _constructsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                constructsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(_constructsTable);

        _splitPane2.setLeftComponent(jScrollPane1);

        _splitPane3.setDividerLocation(180);
        _splitPane3.setDividerSize(5);

        _clonesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Clone", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        _clonesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clonesTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(_clonesTable);

        _splitPane3.setLeftComponent(jScrollPane2);

        _primersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Primer", "Status", "Trace File"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        _primersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                primersTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(_primersTable);

        _splitPane3.setRightComponent(jScrollPane3);

        _splitPane2.setRightComponent(_splitPane3);

        _mainSplitPane.setTopComponent(_splitPane2);

        javax.swing.GroupLayout _mainPanelLayout = new javax.swing.GroupLayout(_mainPanel);
        _mainPanel.setLayout(_mainPanelLayout);
        _mainPanelLayout.setHorizontalGroup(
            _mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(_mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(_mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(_mainToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE)
                    .addComponent(_mainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE))
                .addContainerGap())
        );
        _mainPanelLayout.setVerticalGroup(
            _mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(_mainPanelLayout.createSequentialGroup()
                .addComponent(_mainToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(_mainSplitPane, javax.swing.GroupLayout.PREFERRED_SIZE, 490, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(_mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(_mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void _selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__selectButtonActionPerformed

        JFileChooser    chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.showOpenDialog(null);
        File selectedDirectory = chooser.getSelectedFile();

        String[]            tokens;
        boolean             constructPresent;
        boolean             clonePresent;
        Construct           selectedConstruct = null;
        Clone               selectedClone = null;

        
        if (selectedDirectory != null)
        {
            File[] folderContents = selectedDirectory.listFiles();

            for (File file:folderContents)
            {
                try
                {
                    if (file.getName().substring(file.getName().lastIndexOf(".")).equals(".ab1"))
                    {
                        selectedConstruct = null;
                        selectedClone = null;
                        tokens = file.getName().split("[_.]");

                        for(String token:tokens)
                        {
                            if (token.toLowerCase().matches("[a-zA-Z]*?\\d{2,}?"))
                            {
                                constructPresent = false;

                                for(Construct construct:_constructs)
                                {
                                    if(token.equalsIgnoreCase(construct.getIdentifier()))
                                    {
                                        selectedConstruct = construct;
                                        constructPresent = true;
                                        break;
                                    }
                                }

                                if(!constructPresent)
                                {
                                    selectedConstruct = new Construct(token);
                                    _constructs.add(selectedConstruct);
                                }

                                break;
                            }
                        }

                        for(String token:tokens)
                        {
                            if (token.toLowerCase().matches("\\d+"))
                            {
                                clonePresent = false;

                                for(Clone clone:selectedConstruct.getClones())
                                {
                                    if(token.equalsIgnoreCase(clone.getIdentifier()))
                                    {
                                        selectedClone = clone;
                                        clonePresent = true;
                                        break;
                                    }
                                }

                                if(!clonePresent)
                                {
                                    selectedClone = new Clone(token);
                                    selectedConstruct.addClone(selectedClone);
                                }

                                break;
                            }
                        }

                        // TODO Needs refactoring. Simply selecting third token
                        selectedClone.addPrimer(new Primer(tokens[2], file));
                    }
                }
                catch (StringIndexOutOfBoundsException e)
                {
                    //folder names that don't have a '.' character well cause an exception to be thrown
                }
            }
            
            _constructsTable.setModel(new javax.swing.table.DefaultTableModel(generateConstructsArray(), new String[]{"Construct", "Status"}));
            _constructsTable.doLayout();
        }
    }//GEN-LAST:event__selectButtonActionPerformed

    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkButtonActionPerformed
    }//GEN-LAST:event_checkButtonActionPerformed

    private void constructsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_constructsTableMouseClicked

        displayClones(_constructsTable.getSelectedRow());
    }//GEN-LAST:event_constructsTableMouseClicked

    private void clonesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clonesTableMouseClicked
        
        displayPrimers(_clonesTable.getSelectedRow());
    }//GEN-LAST:event_clonesTableMouseClicked

    private void primersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_primersTableMouseClicked

        this.displaySequenceCheck(_primersTable.getSelectedRow());
    }//GEN-LAST:event_primersTableMouseClicked

    protected void displayClones(int constructsTableSelectedRow)
    {
        String constructID = (String)_constructsTable.getValueAt(constructsTableSelectedRow, 0);

        for(Construct construct:_constructs)
        {
            if(constructID.equalsIgnoreCase(construct.getIdentifier()))
            {
                _clonesTable.setModel(new javax.swing.table.DefaultTableModel(construct.generateClonesArray(), new String[]{"Clone", "Status"}));
                _clonesTable.doLayout();
                break;
            }
        }
    }

    protected void displayPrimers(int clonesTableSelectedRow)
    {
        ArrayList<Clone> clones;
        String constructID = (String)_constructsTable.getValueAt(_constructsTable.getSelectedRow(), 0);
        String cloneID = (String)_clonesTable.getValueAt(clonesTableSelectedRow, 0);
        
        for(Construct construct:_constructs)
        {
            if(constructID.equalsIgnoreCase(construct.getIdentifier()))
            {
                clones = construct.getClones();

                for(Clone clone:clones)
                {
                    if(cloneID.equalsIgnoreCase(clone.getIdentifier()))
                    {
                        _primersTable.setModel(new javax.swing.table.DefaultTableModel(clone.generatePrimersArray(), new String[]{"Primer", "Status", "Trace File"}));
                        _primersTable.doLayout();
                        break;
                    }
                }
                
                break;
            }
        }
    }

    protected void displaySequenceCheck(int primerTableSelectedRow)
    {
        ArrayList<Clone> clones;
        ArrayList<Primer> primers;
        String constructID = (String)_constructsTable.getValueAt(_constructsTable.getSelectedRow(), 0);
        String cloneID = (String)_clonesTable.getValueAt(_clonesTable.getSelectedRow(), 0);
        String traceFileName = (String)_primersTable.getValueAt(primerTableSelectedRow, 2);

        for(Construct construct:_constructs)
        {
            if(constructID.equalsIgnoreCase(construct.getIdentifier()))
            {
                clones = construct.getClones();

                for(Clone clone:clones)
                {
                    if(cloneID.equalsIgnoreCase(clone.getIdentifier()))
                    {
                        primers = clone.getPrimers();

                        for(Primer primer:primers)
                        {
                            if(traceFileName.equalsIgnoreCase(primer.getTraceFile().getName()))
                            {
                                String target = "CTAGAACATGCATCGACGTCTAGGGATACAGGGTAATTACGGCCCCAGAATTCAAAAGATCTTAAGTAAGTAAGAGTATACGTATATCGGCTAAAACGTATTAAGGCGCTTCGGCGCCTTTTTTTATGGGGGTATTTTCATCCCAATCCACACGTCCAACGCACAGCAAACACCACGTCGACCCTATCAGCTGCGTGCTTTCTATGAGTCGTTGCTGCATAACTTGACAATTAATCATCCGGCTCGTATAATGTGTGGAATTTGTAAGGAGGTGACAATATGAGCAAAGGAGAAGAACTTTTCACTGGAGTTGTCCCAATTCTTGTTGAATTAGATGGTGATGTTAATGGGCACAAATTTTCTGTCCGTGGAGAGGGTGAAGGTGATGCTACAAACGGAAAACTCACCCTTAAATTTATTTGCACTACTGGAAAACTACCTGTTCCGTGGCCAACACTTGTCACTACTCTGACCTATGGTGTTCAATGCTTTTCCCGTTATCCGGATCACATGAAACGGCATGACTTTTTCAAGAGTGCCATGCCCGAAGGTTATGTACAGGAACGCACTATATCTTTCAAAGATGACGGGACCTACAAGACGCGTGCTGAAGTCAAGTTTGAAGGTGATACCCTTGTTAATCGTATCGAGTTAAAGGGTATTGATTTTAAAGAAGATGGAAACATTCTTGGACACAAACTCGAGTACAACTTTAACTCACACAATGTATACATCACGGCAGACAAACAAAAGAATGGAATCAAAGCTAACTTCAAAATTCGCCACAACGTTGAAGATGGTTCCGTTCAACTAGCAGACCATTATCAACAAAATACTCCAATTGGCGATGGCCCTGTCCTTTTACCAGACAACCATTACCTGTCGACACAATCTGTCCTTTCGAAAGATCCCAACGAAAAGCGTGACCACATGGTCCTTCTTGAGTTTGTAACTGCTGCTGGGATTACACATGGCATGGATGAGCTCTACAATAAGATCG";
                                _mainSplitPane.setRightComponent(_controller.getCheckPanel(primer.getTraceFile(), target));
                                _mainSplitPane.setDividerLocation(250);
                                break;
                            }
                        }

                        break;
                    }
                }

                break;
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton _checkAllButton;
    protected javax.swing.JTable _clonesTable;
    protected javax.swing.JTable _constructsTable;
    protected javax.swing.JPanel _mainPanel;
    protected javax.swing.JSplitPane _mainSplitPane;
    protected javax.swing.JToolBar _mainToolBar;
    protected javax.swing.JTable _primersTable;
    protected javax.swing.JButton _selectButton;
    protected javax.swing.JSplitPane _splitPane2;
    protected javax.swing.JSplitPane _splitPane3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized SeqCheckerTopComponent getDefault() {
        if (instance == null) {
            instance = new SeqCheckerTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the SeqCheckerTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized SeqCheckerTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(SeqCheckerTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof SeqCheckerTopComponent) {
            return (SeqCheckerTopComponent) win;
        }
        Logger.getLogger(SeqCheckerTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }
}
